{
    "contents" : "## ########################################################\n##\n## Testing for mutual condional independence in a contingency table\n## test based on either deviance or Pearsons chi square\n## <x>  : table\n## <miset>: NULL, a vector of factors to be tested for \n##          MCI(mutual conditional independence)\n## <cfset>: NULL, a vector of conditioning factors\n## <statistic>: DEV, deviance or chi-squae based test\n## ########################################################\nmciTest_table <- function(x, miset=NULL, cfset=NULL, statistic=\"DEV\")\n{\n  statistic <- match.arg(toupper(statistic), c(\"DEV\",   \"X2\"))\n  \n  if (is.null(miset)){\n    #testing for mutual independence amongst factors of contingency table, \n    # as miset and conditioning set is NULL    \n    miset = names(dimnames(x))\n  } \n  else {\n    if (is.null(cfset) || (cfset[1] == \"REST\")){\n      #testing for mutual independence amongst factors in miset, \n      # as conditioning set is NULL , it will be conditioned on the rest     \n      set1 <- names(dimnames(x))\n      cfset = setdiff(set1,miset)\n      \n      if(length(cfset) == 0){\n        cfset = NULL\n      }\n    }\n    else{       \n      #testing for mutual conditional independence amongst factors in miset, \n      # conditioned on cf set, marginalizing over remaining factors\n      x   <- tableMargin(x, c(miset,cfset))       \n    }            \n  }\n  \n  if (is.null(cfset)){\n    dn = dim(x)\n    \n    tab1 =  tableMargin(x, miset[1])\n    dof = dn[1]\n    for(i in 2:length(miset)){\n      tab2 <-   tableMargin(x, miset[i])\n      tab1 = tableOp(tab1, tab2)\n      dof = dof+dn[i]\n    }\n    \n    fit.table <- tablePerm(tab1, miset)/(sum(x))^(length(miset)-1)\n    dof = prod(dn) - dof + (length(miset)-1) #compute DOF\n  } \n  else{\n    vn <- names(dimnames(x))\n    \n    margin1 = tableMargin(x, miset)\n    margin2 = tableMargin(x, cfset)\n    dm1 = dim(margin1)\n    dm2 = dim(margin2)\n    \n    marTab1 =  tableMargin(x, c(miset[1],cfset))\n    \n    cf.dof = prod(dm2)\n    mi.dof = dm1[1]*cf.dof\n    for(i in 2:length(miset)){\n      marTab2 <-   tableMargin(x, c(miset[i],cfset))    \n      marTab1 = tableOp(marTab1, marTab2)      \n      marTab1 = tableOp(marTab1, margin2,\"/\")\n      mi.dof = mi.dof+(dm1[i]*cf.dof)\n    }\n     \n    fit.table <- tablePerm(marTab1, vn)\n    cf.dof = cf.dof*(length(miset)-1)\n    dof = prod(dim(x)) - mi.dof+cf.dof #compute DOF\n  }\n  \n  \n  #Evaluate test statistic\n  if (statistic==\"DEV\"){             ## Deviance\n    testStat  <- 2* x * log(x/fit.table)\n  } else {                           ## Pearson chi square\n    testStat <- (x-fit.table)^2/fit.table\n  }\n  testStat[!is.finite(testStat)] <- 0\n  testSum <- sum(testStat)\n  \n  pValue   <- 1-pchisq(testSum, dof)\n  \n  ans <- list(statistic=testSum, p.value=pValue, df=dof, \n              statname=statistic, method=\"CHISQ\", mset = miset, cset = cfset)\n  class(ans) <- \"mciTest\"\n  ans\n}",
    "created" : 1433679329891.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1881705664",
    "id" : "E65C953A",
    "lastKnownWriteTime" : 1433555782,
    "path" : "E:/RPrograms/gMCI/gMCI/R/mciTest_table.R",
    "project_path" : "R/mciTest_table.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}